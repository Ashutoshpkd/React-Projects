{"ast":null,"code":"var _jsxFileName = \"/Users/ashpawad/Documents/Practice/Udemy/React-Projects/food-order-app/src/components/Cart/Checkout/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport useInput from '../../../hooks/use-input';\nimport classes from './Checkout.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  _s();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n\n    if (invalidCity || invalidCode || invalidName || invalidStreet) {\n      console.log('Invalid Inputs');\n      return;\n    }\n\n    const userData = {\n      name: name,\n      city: city,\n      street: street,\n      postalCode: code\n    };\n    console.log(userData);\n    resetCity();\n    resetCode();\n    resetName();\n    resetStreet();\n  };\n\n  const isEmpty = value => value.trim() === '';\n\n  function isNumber(str) {\n    return !/\\D/.test(str);\n  }\n\n  const {\n    value: name,\n    hasError: invalidName,\n    changeHandler: nameChange,\n    blurHandler: nameBlur,\n    reset: resetName\n  } = useInput(isEmpty);\n  const {\n    value: city,\n    hasError: invalidCity,\n    changeHandler: cityChange,\n    blurHandler: cityBlur,\n    reset: resetCity\n  } = useInput(isEmpty);\n  const {\n    value: street,\n    hasError: invalidStreet,\n    changeHandler: streetChange,\n    blurHandler: streetBlur,\n    reset: resetStreet\n  } = useInput(isEmpty);\n  const {\n    value: code,\n    hasError: invalidCode,\n    changeHandler: codeChange,\n    blurHandler: codeBlur,\n    reset: resetCode\n  } = useInput(isNumber);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChange,\n        onBlur: nameBlur,\n        value: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        onChange: streetChange,\n        onBlur: streetBlur,\n        value: street\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        onBlur: codeBlur,\n        onChange: codeChange,\n        value: code\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        onChange: cityChange,\n        onBlur: cityBlur,\n        value: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"OlL5rn2GVTtxRWJ3c8ey6cvOo4o=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/food-order-app/src/components/Cart/Checkout/Checkout.js"],"names":["useInput","classes","Checkout","props","confirmHandler","event","preventDefault","invalidCity","invalidCode","invalidName","invalidStreet","console","log","userData","name","city","street","postalCode","code","resetCity","resetCode","resetName","resetStreet","isEmpty","value","trim","isNumber","str","test","hasError","changeHandler","nameChange","blurHandler","nameBlur","reset","cityChange","cityBlur","streetChange","streetBlur","codeChange","codeBlur","form","control","actions","onCancel","submit"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,0BAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAIC,WAAW,IAAIC,WAAf,IAA8BC,WAA9B,IAA6CC,aAAjD,EAAiE;AAC7DC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACH;;AAED,UAAMC,QAAQ,GAAG;AACbC,MAAAA,IAAI,EAAEA,IADO;AAEbC,MAAAA,IAAI,EAAEA,IAFO;AAGbC,MAAAA,MAAM,EAAEA,MAHK;AAIbC,MAAAA,UAAU,EAAEC;AAJC,KAAjB;AAOAP,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACAM,IAAAA,SAAS;AACTC,IAAAA,SAAS;AACTC,IAAAA,SAAS;AACTC,IAAAA,WAAW;AAEZ,GArBD;;AAuBA,QAAMC,OAAO,GAAIC,KAAD,IACZA,KAAK,CAACC,IAAN,OAAiB,EADrB;;AAIA,WAASC,QAAT,CAAkBC,GAAlB,EAAsB;AACpB,WAAO,CAAC,KAAKC,IAAL,CAAUD,GAAV,CAAR;AACD;;AAED,QAAM;AAAEH,IAAAA,KAAK,EAAEV,IAAT;AACEe,IAAAA,QAAQ,EAAEpB,WADZ;AAEEqB,IAAAA,aAAa,EAAEC,UAFjB;AAGEC,IAAAA,WAAW,EAAEC,QAHf;AAIEC,IAAAA,KAAK,EAAEb;AAJT,MAKIrB,QAAQ,CAACuB,OAAD,CALlB;AAOA,QAAM;AAAEC,IAAAA,KAAK,EAAET,IAAT;AACJc,IAAAA,QAAQ,EAAEtB,WADN;AAEJuB,IAAAA,aAAa,EAAEK,UAFX;AAGJH,IAAAA,WAAW,EAAEI,QAHT;AAIJF,IAAAA,KAAK,EAAEf;AAJH,MAKAnB,QAAQ,CAACuB,OAAD,CALd;AAOF,QAAM;AAAEC,IAAAA,KAAK,EAAER,MAAT;AACFa,IAAAA,QAAQ,EAAEnB,aADR;AAEFoB,IAAAA,aAAa,EAAEO,YAFb;AAGFL,IAAAA,WAAW,EAAEM,UAHX;AAIFJ,IAAAA,KAAK,EAAEZ;AAJL,MAKEtB,QAAQ,CAACuB,OAAD,CALhB;AAOI,QAAM;AAAEC,IAAAA,KAAK,EAAEN,IAAT;AACNW,IAAAA,QAAQ,EAAErB,WADJ;AAENsB,IAAAA,aAAa,EAAES,UAFT;AAGNP,IAAAA,WAAW,EAAEQ,QAHP;AAINN,IAAAA,KAAK,EAAEd;AAJD,MAKFpB,QAAQ,CAAC0B,QAAD,CALZ;AAOF,sBACE;AAAM,IAAA,SAAS,EAAEzB,OAAO,CAACwC,IAAzB;AAA+B,IAAA,QAAQ,EAAErC,cAAzC;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEH,OAAO,CAACyC,OAAxB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,MAAtB;AAA6B,QAAA,QAAQ,EAAEX,UAAvC;AAAmD,QAAA,MAAM,EAAEE,QAA3D;AAAqE,QAAA,KAAK,EAAEnB;AAA5E;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAEb,OAAO,CAACyC,OAAxB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,QAAtB;AAA+B,QAAA,QAAQ,EAAEL,YAAzC;AAAuD,QAAA,MAAM,EAAEC,UAA/D;AAA2E,QAAA,KAAK,EAAEtB;AAAlF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eASE;AAAK,MAAA,SAAS,EAAEf,OAAO,CAACyC,OAAxB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,QAAtB;AAA+B,QAAA,MAAM,EAAEF,QAAvC;AAAiD,QAAA,QAAQ,EAAED,UAA3D;AAAuE,QAAA,KAAK,EAAErB;AAA9E;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAaE;AAAK,MAAA,SAAS,EAAEjB,OAAO,CAACyC,OAAxB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,MAAtB;AAA6B,QAAA,QAAQ,EAAEP,UAAvC;AAAmD,QAAA,MAAM,EAAEC,QAA3D;AAAqE,QAAA,KAAK,EAAErB;AAA5E;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAiBE;AAAK,MAAA,SAAS,EAAEd,OAAO,CAAC0C,OAAxB;AAAA,8BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAExC,KAAK,CAACyC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAQ,QAAA,SAAS,EAAE3C,OAAO,CAAC4C,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAtFD;;GAAM3C,Q;UAqCMF,Q,EAOJA,Q,EAOAA,Q,EAOAA,Q;;;KA1DFE,Q;AAwFN,eAAeA,QAAf","sourcesContent":["import useInput from '../../../hooks/use-input';\nimport classes from './Checkout.module.css';\n\nconst Checkout = (props) => {\n  const confirmHandler = (event) => {\n    event.preventDefault();\n\n    if((invalidCity || invalidCode || invalidName || invalidStreet)) {\n        console.log('Invalid Inputs')\n        return;\n    }\n\n    const userData = {\n        name: name,\n        city: city,\n        street: street,\n        postalCode: code,\n    }\n\n    console.log(userData);\n    resetCity();\n    resetCode();\n    resetName();\n    resetStreet();\n\n  };\n\n  const isEmpty = (value) => (\n      value.trim() === ''\n  );\n\n  function isNumber(str){\n    return !/\\D/.test(str);\n  }\n\n  const { value: name,\n          hasError: invalidName,\n          changeHandler: nameChange,\n          blurHandler: nameBlur,\n          reset: resetName,\n        } = useInput(isEmpty);\n\n  const { value: city,\n    hasError: invalidCity,\n    changeHandler: cityChange,\n    blurHandler: cityBlur,\n    reset: resetCity,\n    } = useInput(isEmpty);\n\nconst { value: street,\n    hasError: invalidStreet,\n    changeHandler: streetChange,\n    blurHandler: streetBlur,\n    reset: resetStreet,\n    } = useInput(isEmpty);\n\n    const { value: code,\n    hasError: invalidCode,\n    changeHandler: codeChange,\n    blurHandler: codeBlur,\n    reset: resetCode,\n    } = useInput(isNumber);\n\n  return (\n    <form className={classes.form} onSubmit={confirmHandler}>\n      <div className={classes.control}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameChange} onBlur={nameBlur} value={name}/>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='street'>Street</label>\n        <input type='text' id='street' onChange={streetChange} onBlur={streetBlur} value={street}/>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='postal'>Postal Code</label>\n        <input type='text' id='postal' onBlur={codeBlur} onChange={codeChange} value={code}/>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='city'>City</label>\n        <input type='text' id='city' onChange={cityChange} onBlur={cityBlur} value={city}/>\n      </div>\n      <div className={classes.actions}>\n        <button type='button' onClick={props.onCancel}>\n          Cancel\n        </button>\n        <button className={classes.submit}>Confirm</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;"]},"metadata":{},"sourceType":"module"}