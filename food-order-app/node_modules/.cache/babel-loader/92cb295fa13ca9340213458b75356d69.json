{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nconst useInput = validate => {\n  _s();\n\n  const [value, setValue] = useState('');\n  const [isValueTouched, setIsValueTouched] = useState(false);\n  const hasError = validate(value) && isValueTouched;\n\n  const changeHandler = e => {\n    setValue(e.target.value);\n  };\n\n  const blurHandler = e => {\n    setIsValueTouched(true);\n  };\n\n  const reset = () => {\n    setIsValueTouched(false);\n    setValue('');\n  };\n\n  return {\n    value,\n    hasError,\n    changeHandler,\n    blurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"uOJYzb0SWALH6NkrT8RMfjLITwE=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/food-order-app/src/hooks/use-input.js"],"names":["React","useState","useInput","validate","value","setValue","isValueTouched","setIsValueTouched","hasError","changeHandler","e","target","blurHandler","reset"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,QAAQ,GAAIC,QAAD,IAAc;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAMO,QAAQ,GAAGL,QAAQ,CAACC,KAAD,CAAR,IAAmBE,cAApC;;AAEA,QAAMG,aAAa,GAAIC,CAAD,IAAO;AACzBL,IAAAA,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASP,KAAV,CAAR;AACH,GAFD;;AAIA,QAAMQ,WAAW,GAAGF,CAAC,IAAI;AACrBH,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH,GAFD;;AAIA,QAAMM,KAAK,GAAG,MAAM;AAChBN,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAF,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAHD;;AAKA,SAAO;AACHD,IAAAA,KADG;AAEHI,IAAAA,QAFG;AAGHC,IAAAA,aAHG;AAIHG,IAAAA,WAJG;AAKHC,IAAAA;AALG,GAAP;AAOH,CA1BD;;GAAMX,Q;;AA4BN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst useInput = (validate) => {\n    const [value, setValue] = useState('');\n    const [isValueTouched, setIsValueTouched] = useState(false);\n\n    const hasError = validate(value) && isValueTouched;\n\n    const changeHandler = (e) => {\n        setValue(e.target.value);\n    }\n\n    const blurHandler = e => {\n        setIsValueTouched(true);\n    }\n\n    const reset = () => {\n        setIsValueTouched(false);\n        setValue('');\n    }\n\n    return {\n        value,\n        hasError,\n        changeHandler,\n        blurHandler,\n        reset,\n    }\n};\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}