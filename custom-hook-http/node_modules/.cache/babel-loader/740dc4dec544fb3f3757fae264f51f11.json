{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\n\nconst useHttp = _ref => {\n  _s();\n\n  let {\n    requestObj,\n    transformData\n  } = _ref;\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendHttpRequest = useCallback(async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestObj.url, {\n        method: requestObj.method || 'GET',\n        headers: requestObj.headers || null,\n        body: requestObj.body ? JSON.stringify(requestObj.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      const loadedTasks = transformData(data);\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendHttpRequest\n  };\n};\n\n_s(useHttp, \"s9KUDO81BrxtthZdNPpt7htlKFI=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/custom-hook-http/src/hooks/use-http.js"],"names":["React","useCallback","useHttp","requestObj","transformData","isLoading","setIsLoading","useState","error","setError","sendHttpRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","loadedTasks","setTasks","err","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;;AAEA,MAAMC,OAAO,GAAG,QAAiC;AAAA;;AAAA,MAAhC;AAACC,IAAAA,UAAD;AAAaC,IAAAA;AAAb,GAAgC;AAC7C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBF,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMG,eAAe,GAAGT,WAAW,CAAE,MAAOU,QAAP,IAAoB;AACrDL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAG,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1BV,UAAU,CAACW,GADe,EACV;AACZC,QAAAA,MAAM,EAAEZ,UAAU,CAACY,MAAX,IAAqB,KADjB;AAEZC,QAAAA,OAAO,EAAEb,UAAU,CAACa,OAAX,IAAsB,IAFnB;AAGZC,QAAAA,IAAI,EAAEd,UAAU,CAACc,IAAX,GAAkBC,IAAI,CAACC,SAAL,CAAehB,UAAU,CAACc,IAA1B,CAAlB,GAAoD;AAH9C,OADU,CAA5B;;AAQA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACA,YAAMC,WAAW,GAAGpB,aAAa,CAACkB,IAAD,CAAjC;AAEAG,MAAAA,QAAQ,CAACD,WAAD,CAAR;AACD,KAjBD,CAiBE,OAAOE,GAAP,EAAY;AACZjB,MAAAA,QAAQ,CAACiB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAxBgC,EAwB9B,EAxB8B,CAAnC;AA0BE,SAAO;AACHD,IAAAA,SADG;AAEHG,IAAAA,KAFG;AAGHE,IAAAA;AAHG,GAAP;AAKL,CAnCD;;GAAMR,O;;AAqCN,eAAeA,OAAf","sourcesContent":["import React, { useCallback } from \"react\";\n\nconst useHttp = ({requestObj, transformData}) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const sendHttpRequest = useCallback( async (taskText) => {\n        setIsLoading(true);\n        setError(null);\n        try {\n          const response = await fetch(\n            requestObj.url, {\n                method: requestObj.method || 'GET',\n                headers: requestObj.headers || null,\n                body: requestObj.body ? JSON.stringify(requestObj.body) : null,\n            }\n          );\n    \n          if (!response.ok) {\n            throw new Error('Request failed!');\n          }\n    \n          const data = await response.json();\n          const loadedTasks = transformData(data);\n    \n          setTasks(loadedTasks);\n        } catch (err) {\n          setError(err.message || 'Something went wrong!');\n        }\n        setIsLoading(false);\n      }, []);\n\n      return {\n          isLoading,\n          error,\n          sendHttpRequest,\n      }\n};\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}