{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendHttpRequest = useCallback(async (requestObj, transformData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestObj.url, {\n        method: requestObj.method || 'GET',\n        headers: requestObj.headers || {},\n        body: requestObj.body ? JSON.stringify(requestObj.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      transformData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendHttpRequest\n  };\n};\n\n_s(useHttp, \"s9KUDO81BrxtthZdNPpt7htlKFI=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/custom-hook-http/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","isLoading","setIsLoading","error","setError","sendHttpRequest","requestObj","transformData","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,eAAe,GAAGN,WAAW,CAAE,OAAOO,UAAP,EAAmBC,aAAnB,KAAqC;AACtEL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAC1BH,UAAU,CAACI,GADe,EACV;AACZC,QAAAA,MAAM,EAAEL,UAAU,CAACK,MAAX,IAAqB,KADjB;AAEZC,QAAAA,OAAO,EAAEN,UAAU,CAACM,OAAX,IAAsB,EAFnB;AAGZC,QAAAA,IAAI,EAAEP,UAAU,CAACO,IAAX,GAAkBC,IAAI,CAACC,SAAL,CAAeT,UAAU,CAACO,IAA1B,CAAlB,GAAoD;AAH9C,OADU,CAA5B;;AAQA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAZ,MAAAA,aAAa,CAACW,IAAD,CAAb;AAED,KAhBD,CAgBE,OAAOE,GAAP,EAAY;AACZhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvBgC,EAuB9B,EAvB8B,CAAnC;AAyBE,SAAO;AACHD,IAAAA,SADG;AAEHE,IAAAA,KAFG;AAGHE,IAAAA;AAHG,GAAP;AAKL,CAlCD;;GAAML,O;;AAoCN,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const sendHttpRequest = useCallback( async (requestObj, transformData) => {\n        setIsLoading(true);\n        setError(null);\n        try {\n          const response = await fetch(\n            requestObj.url, {\n                method: requestObj.method || 'GET',\n                headers: requestObj.headers || {},\n                body: requestObj.body ? JSON.stringify(requestObj.body) : null,\n            }\n          );\n    \n          if (!response.ok) {\n            throw new Error('Request failed!');\n          }\n    \n          const data = await response.json();\n          transformData(data);\n\n        } catch (err) {\n          setError(err.message || 'Something went wrong!');\n        }\n        setIsLoading(false);\n      }, []);\n\n      return {\n          isLoading,\n          error,\n          sendHttpRequest,\n      }\n};\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}