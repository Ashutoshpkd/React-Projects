{"ast":null,"code":"var _jsxFileName = \"/Users/ashpawad/Documents/Practice/Udemy/React-Projects/todo-app/src/components/CourseGoals/CourseGoals.js\",\n    _s = $RefreshSig$();\n\nimport CourseForm from \"../CourseGoalForm/CourseForm\";\nimport { useState } from \"react\";\nimport GoalsList from \"./components/GoalsList/GoalsList\";\nimport ErrorModal from \"../ErrorModal/ErrorModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CourseGoal = () => {\n  _s();\n\n  const [courseGoals, setCourseGoals] = useState();\n  const [render, setRender] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const submitHandler = (name, age) => {\n    const goal = {\n      name: name,\n      age: age\n    };\n    courseGoals ? setCourseGoals(prevState => [...prevState, goal]) : setCourseGoals([goal]);\n  };\n\n  const clickHandler = id => {\n    setCourseGoals(prevState => {\n      prevState.splice(id, 1);\n      return prevState;\n    });\n    setRender(prevState => !prevState);\n  };\n\n  const checkError = (name, age) => {\n    if (name.trim().length <= 0) {\n      setErrorMessage('Field cannot be empty');\n      setError(true);\n      return false;\n    }\n\n    if (age <= 0) {\n      setErrorMessage('Age should be greater than 0');\n      setError(true);\n      return false;\n    }\n  };\n\n  const closeModal = () => {\n    setError(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n      title: \"Invalid Input\",\n      message: errorMessage,\n      closeModal: closeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(CourseForm, {\n      onSubmit: submitHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), courseGoals && courseGoals.map((courseGoal, index) => /*#__PURE__*/_jsxDEV(GoalsList, {\n      goal: courseGoal,\n      id: index,\n      onClickList: clickHandler,\n      onError: checkError\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true);\n};\n\n_s(CourseGoal, \"FcNaEdqoet+h3B4P4QffDsG5Xlw=\");\n\n_c = CourseGoal;\nexport default CourseGoal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CourseGoal\");","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/todo-app/src/components/CourseGoals/CourseGoals.js"],"names":["CourseForm","useState","GoalsList","ErrorModal","CourseGoal","courseGoals","setCourseGoals","render","setRender","error","setError","errorMessage","setErrorMessage","submitHandler","name","age","goal","prevState","clickHandler","id","splice","checkError","trim","length","closeModal","map","courseGoal","index"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,8BAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,EAA9C;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMY,aAAa,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;AAEjC,UAAMC,IAAI,GAAG;AACTF,MAAAA,IAAI,EAAEA,IADG;AAETC,MAAAA,GAAG,EAAEA;AAFI,KAAb;AAIAV,IAAAA,WAAW,GACXC,cAAc,CAAEW,SAAD,IACX,CAAC,GAAGA,SAAJ,EAAeD,IAAf,CADU,CADH,GAGNV,cAAc,CAAC,CAACU,IAAD,CAAD,CAHnB;AAIH,GAVD;;AAYA,QAAME,YAAY,GAAIC,EAAD,IAAQ;AACzBb,IAAAA,cAAc,CAAEW,SAAD,IAAe;AAC1BA,MAAAA,SAAS,CAACG,MAAV,CAAiBD,EAAjB,EAAoB,CAApB;AACA,aAAOF,SAAP;AACH,KAHa,CAAd;AAKAT,IAAAA,SAAS,CAAES,SAAD,IAAgB,CAACA,SAAlB,CAAT;AACH,GAPD;;AASA,QAAMI,UAAU,GAAG,CAACP,IAAD,EAAOC,GAAP,KAAe;AAC9B,QAAID,IAAI,CAACQ,IAAL,GAAYC,MAAZ,IAAsB,CAA1B,EAA6B;AACzBX,MAAAA,eAAe,CAAC,uBAAD,CAAf;AACAF,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,aAAO,KAAP;AACH;;AAED,QAAIK,GAAG,IAAI,CAAX,EAAc;AACVH,MAAAA,eAAe,CAAC,8BAAD,CAAf;AACAF,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,aAAO,KAAP;AACH;AACJ,GAZD;;AAcA,QAAMc,UAAU,GAAG,MAAM;AACrBd,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACH,GAFD;;AAIA,sBACI;AAAA,eACCD,KAAK,iBAAK,QAAC,UAAD;AAAY,MAAA,KAAK,EAAC,eAAlB;AAAkC,MAAA,OAAO,EAAEE,YAA3C;AAAyD,MAAA,UAAU,EAAEa;AAArE;AAAA;AAAA;AAAA;AAAA,YADX,eAEA,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEX;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFA,EAGCR,WAAW,IAAIA,WAAW,CAACoB,GAAZ,CAAgB,CAACC,UAAD,EAAaC,KAAb,kBAC5B,QAAC,SAAD;AAAuB,MAAA,IAAI,EAAED,UAA7B;AAAyC,MAAA,EAAE,EAAEC,KAA7C;AAAoD,MAAA,WAAW,EAAET,YAAjE;AAA+E,MAAA,OAAO,EAAEG;AAAxF,OAAgBM,KAAhB;AAAA;AAAA;AAAA;AAAA,YADY,CAHhB;AAAA,kBADJ;AAUH,CAvDD;;GAAMvB,U;;KAAAA,U;AAyDN,eAAeA,UAAf","sourcesContent":["import CourseForm from \"../CourseGoalForm/CourseForm\";\nimport { useState } from \"react\";\nimport GoalsList from \"./components/GoalsList/GoalsList\";\nimport ErrorModal from \"../ErrorModal/ErrorModal\";\n\nconst CourseGoal = () => {\n    const [courseGoals, setCourseGoals] = useState();\n    const [render, setRender] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const submitHandler = (name, age) => {\n\n        const goal = {\n            name: name,\n            age: age,\n        };\n        courseGoals ?\n        setCourseGoals((prevState) => (\n            [...prevState, goal]\n        )) : setCourseGoals([goal,]);\n    };\n\n    const clickHandler = (id) => {\n        setCourseGoals((prevState) => {\n            prevState.splice(id,1);\n            return prevState;\n        });\n\n        setRender((prevState) => (!prevState));\n    };\n\n    const checkError = (name, age) => {\n        if (name.trim().length <= 0) {\n            setErrorMessage('Field cannot be empty');\n            setError(true);\n            return false;\n        }\n\n        if (age <= 0) {\n            setErrorMessage('Age should be greater than 0');\n            setError(true);\n            return false;\n        }\n    };\n\n    const closeModal = () => {\n        setError(false);\n    };\n\n    return (\n        <>\n        {error && (<ErrorModal title='Invalid Input' message={errorMessage} closeModal={closeModal} />)}\n        <CourseForm onSubmit={submitHandler}></CourseForm>\n        {courseGoals && courseGoals.map((courseGoal, index) => (\n            <GoalsList key={index} goal={courseGoal} id={index} onClickList={clickHandler} onError={checkError}/>\n        ))}\n        </>\n        \n    );\n};\n\nexport default CourseGoal;"]},"metadata":{},"sourceType":"module"}