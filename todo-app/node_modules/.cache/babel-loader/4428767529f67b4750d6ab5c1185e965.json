{"ast":null,"code":"var _jsxFileName = \"/Users/ashpawad/Documents/Practice/Udemy/React-Projects/todo-app/src/components/CourseGoals/CourseGoals.js\",\n    _s = $RefreshSig$();\n\nimport CourseForm from \"../CourseGoalForm/CourseForm\";\nimport { useState } from \"react\";\nimport GoalsList from \"./components/GoalsList/GoalsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CourseGoal = () => {\n  _s();\n\n  const [courseGoals, setCourseGoals] = useState();\n  const [render, setRender] = useState(false);\n  const [error, setError] = useState(false);\n\n  const submitHandler = (name, age) => {\n    const goal = {\n      name: name,\n      age: age\n    };\n    courseGoals ? setCourseGoals(prevState => [...prevState, goal]) : setCourseGoals([goal]);\n  };\n\n  const clickHandler = id => {\n    setCourseGoals(prevState => {\n      prevState.splice(id, 1);\n      return prevState;\n    });\n    setRender(prevState => !prevState);\n  };\n\n  const checkError = (name, age) => {};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CourseForm, {\n      onSubmit: submitHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), courseGoals && courseGoals.map((courseGoal, index) => /*#__PURE__*/_jsxDEV(GoalsList, {\n      goal: courseGoal,\n      id: index,\n      onClickList: clickHandler\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true);\n};\n\n_s(CourseGoal, \"U6ea9C3XtUrCJO+VM8OfqMLmCl0=\");\n\n_c = CourseGoal;\nexport default CourseGoal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CourseGoal\");","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/todo-app/src/components/CourseGoals/CourseGoals.js"],"names":["CourseForm","useState","GoalsList","CourseGoal","courseGoals","setCourseGoals","render","setRender","error","setError","submitHandler","name","age","goal","prevState","clickHandler","id","splice","checkError","map","courseGoal","index"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,8BAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,EAA9C;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMS,aAAa,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;AAEjC,UAAMC,IAAI,GAAG;AACTF,MAAAA,IAAI,EAAEA,IADG;AAETC,MAAAA,GAAG,EAAEA;AAFI,KAAb;AAIAR,IAAAA,WAAW,GACXC,cAAc,CAAES,SAAD,IACX,CAAC,GAAGA,SAAJ,EAAeD,IAAf,CADU,CADH,GAGNR,cAAc,CAAC,CAACQ,IAAD,CAAD,CAHnB;AAIH,GAVD;;AAYA,QAAME,YAAY,GAAIC,EAAD,IAAQ;AACzBX,IAAAA,cAAc,CAAES,SAAD,IAAe;AAC1BA,MAAAA,SAAS,CAACG,MAAV,CAAiBD,EAAjB,EAAoB,CAApB;AACA,aAAOF,SAAP;AACH,KAHa,CAAd;AAKAP,IAAAA,SAAS,CAAEO,SAAD,IAAgB,CAACA,SAAlB,CAAT;AACH,GAPD;;AASA,QAAMI,UAAU,GAAG,CAACP,IAAD,EAAOC,GAAP,KAAe,CAEjC,CAFD;;AAIA,sBACI;AAAA,4BACA,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEF;AAAtB;AAAA;AAAA;AAAA;AAAA,YADA,EAECN,WAAW,IAAIA,WAAW,CAACe,GAAZ,CAAgB,CAACC,UAAD,EAAaC,KAAb,kBAC5B,QAAC,SAAD;AAAuB,MAAA,IAAI,EAAED,UAA7B;AAAyC,MAAA,EAAE,EAAEC,KAA7C;AAAoD,MAAA,WAAW,EAAEN;AAAjE,OAAgBM,KAAhB;AAAA;AAAA;AAAA;AAAA,YADY,CAFhB;AAAA,kBADJ;AASH,CAvCD;;GAAMlB,U;;KAAAA,U;AAyCN,eAAeA,UAAf","sourcesContent":["import CourseForm from \"../CourseGoalForm/CourseForm\";\nimport { useState } from \"react\";\nimport GoalsList from \"./components/GoalsList/GoalsList\";\n\nconst CourseGoal = () => {\n    const [courseGoals, setCourseGoals] = useState();\n    const [render, setRender] = useState(false);\n    const [error, setError] = useState(false);\n\n    const submitHandler = (name, age) => {\n\n        const goal = {\n            name: name,\n            age: age,\n        };\n        courseGoals ?\n        setCourseGoals((prevState) => (\n            [...prevState, goal]\n        )) : setCourseGoals([goal,]);\n    };\n\n    const clickHandler = (id) => {\n        setCourseGoals((prevState) => {\n            prevState.splice(id,1);\n            return prevState;\n        });\n\n        setRender((prevState) => (!prevState));\n    };\n\n    const checkError = (name, age) => {\n\n    };\n\n    return (\n        <>\n        <CourseForm onSubmit={submitHandler}></CourseForm>\n        {courseGoals && courseGoals.map((courseGoal, index) => (\n            <GoalsList key={index} goal={courseGoal} id={index} onClickList={clickHandler}/>\n        ))}\n        </>\n        \n    );\n};\n\nexport default CourseGoal;"]},"metadata":{},"sourceType":"module"}