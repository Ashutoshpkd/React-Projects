{"ast":null,"code":"var _jsxFileName = \"/Users/ashpawad/Documents/Practice/Udemy/React-Projects/star-wars/src/App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [movies, setMovies] = useState([]);\n\n  const fetchMovies = async () => {\n    setIsLoading(true);\n\n    try {\n      const resp = await fetch('https://swapi.dev/api/films');\n      const data = await resp.json();\n      const transformedMovies = data && data.results.map(movie => ({\n        id: movie.episode_id,\n        title: movie.title,\n        openingText: movie.opening_crawl,\n        releaseDate: movie.release_date\n      }));\n      setMovies(transformedMovies);\n    } catch (error) {\n      console.log('ERROR');\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: fetchMovies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, !isLoading && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 23\n    }\n  }, \"Loading...\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/star-wars/src/App.js"],"names":["React","useState","MoviesList","App","isLoading","setIsLoading","error","setError","movies","setMovies","fetchMovies","resp","fetch","data","json","transformedMovies","results","map","movie","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMS,WAAW,GAAG,YAAY;AAC9BL,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AACF,YAAMM,IAAI,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAxB;AACA,YAAMC,IAAI,GAAG,MAAMF,IAAI,CAACG,IAAL,EAAnB;AACA,YAAMC,iBAAiB,GAAGF,IAAI,IAAIA,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,KAAD,KACjD;AACEC,QAAAA,EAAE,EAAED,KAAK,CAACE,UADZ;AAEEC,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAFf;AAGEC,QAAAA,WAAW,EAAEJ,KAAK,CAACK,aAHrB;AAIEC,QAAAA,WAAW,EAAEN,KAAK,CAACO;AAJrB,OADiD,CAAjB,CAAlC;AAQAhB,MAAAA,SAAS,CAACM,iBAAD,CAAT;AACD,KAZD,CAYE,OAAMT,KAAN,EAAa;AACboB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;AACDtB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAlBD;;AAoBA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEK,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACN,SAAD,iBAAe,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEI,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADlB,EAEGJ,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFhB,CAJF,CADF;AAWD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [movies, setMovies] = useState([]);\n\n  const fetchMovies = async () => {\n    setIsLoading(true);\n    try {\n      const resp = await fetch('https://swapi.dev/api/films');\n      const data = await resp.json();\n      const transformedMovies = data && data.results.map((movie) => (\n        {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date,\n        }\n      ));\n      setMovies(transformedMovies);\n    } catch(error) {\n      console.log('ERROR');\n    }\n    setIsLoading(false);\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button type='button' onClick={fetchMovies}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && (<MoviesList movies={movies} />)}\n        {isLoading && <p>Loading...</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}