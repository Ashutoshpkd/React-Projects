{"ast":null,"code":"import { createStore } from 'redux';\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\nconst INITIAL_COUNTER_STATE = {\n  counter: 0,\n  showCounter: true\n};\nconst INITIAL_AUTH_STATE = {\n  authenticated: false\n}; // const reducer = (state = INITIAL_STATE, action) => {\n//     if(action.type === 'INCREMENT') {\n//         return {\n//             ...state,\n//             counter: state.counter + 1,\n//         }\n//     }\n//     if(action.type === 'DECREMENT') {\n//         return {\n//             ...state,\n//             counter: state.counter - 1,\n//         }\n//     }\n//     if(action.type === 'TOGGLE') {\n//         return {\n//             ...state,\n//             showCounter: !state.showCounter,\n//         }\n//     }\n//     if(action.type === 'INCREASE') {\n//         return {\n//             ...state,\n//             counter: state.counter + action.increase,\n//         }\n//     }\n//     return state;\n// }\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: INITIAL_COUNTER_STATE,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, payload) {\n      console.log(payload.increase);\n      state.counter = state.counter + payload.payload.increase;\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: INITIAL_AUTH_STATE,\n  reducers: {\n    login(state) {\n      state.authenticated = true;\n    },\n\n    logout(state) {\n      state.authenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/redux-practice/src/store/index.js"],"names":["createStore","configureStore","createSlice","INITIAL_COUNTER_STATE","counter","showCounter","INITIAL_AUTH_STATE","authenticated","counterSlice","name","initialState","reducers","increment","state","decrement","increase","payload","console","log","toggle","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AAEA,MAAMC,qBAAqB,GAAG;AAC1BC,EAAAA,OAAO,EAAE,CADiB;AAE1BC,EAAAA,WAAW,EAAE;AAFa,CAA9B;AAKA,MAAMC,kBAAkB,GAAG;AACvBC,EAAAA,aAAa,EAAE;AADQ,CAA3B,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGN,WAAW,CAAC;AAC7BO,EAAAA,IAAI,EAAE,SADuB;AAE7BC,EAAAA,YAAY,EAAEP,qBAFe;AAG7BQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACT,OAAN;AACH,KAHK;;AAINU,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACT,OAAN;AACH,KANK;;AAONW,IAAAA,QAAQ,CAACF,KAAD,EAAQG,OAAR,EAAiB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACD,QAApB;AACAF,MAAAA,KAAK,CAACT,OAAN,GAAgBS,KAAK,CAACT,OAAN,GAAgBY,OAAO,CAACA,OAAR,CAAgBD,QAAhD;AACH,KAVK;;AAWNI,IAAAA,MAAM,CAACN,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACR,WAAN,GAAoB,CAACQ,KAAK,CAACR,WAA3B;AACH;;AAbK;AAHmB,CAAD,CAAhC;AAoBA,MAAMe,SAAS,GAAGlB,WAAW,CAAC;AAC1BO,EAAAA,IAAI,EAAE,gBADoB;AAE1BC,EAAAA,YAAY,EAAEJ,kBAFY;AAG1BK,EAAAA,QAAQ,EAAE;AACNU,IAAAA,KAAK,CAACR,KAAD,EAAQ;AACTA,MAAAA,KAAK,CAACN,aAAN,GAAsB,IAAtB;AACH,KAHK;;AAINe,IAAAA,MAAM,CAACT,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACN,aAAN,GAAsB,KAAtB;AACH;;AANK;AAHgB,CAAD,CAA7B;AAaA,MAAMgB,KAAK,GAAGtB,cAAc,CAAC;AACzBuB,EAAAA,OAAO,EAAE;AACLpB,IAAAA,OAAO,EAAEI,YAAY,CAACgB,OADjB;AAELC,IAAAA,IAAI,EAAEL,SAAS,CAACI;AAFX;AADgB,CAAD,CAA5B;AAOA,OAAO,MAAME,cAAc,GAAGlB,YAAY,CAACmB,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAA9B;AAEP,eAAeJ,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\n\nconst INITIAL_COUNTER_STATE = {\n    counter: 0,\n    showCounter: true,\n};\n\nconst INITIAL_AUTH_STATE = {\n    authenticated: false,\n}\n\n// const reducer = (state = INITIAL_STATE, action) => {\n//     if(action.type === 'INCREMENT') {\n//         return {\n//             ...state,\n//             counter: state.counter + 1,\n//         }\n//     }\n//     if(action.type === 'DECREMENT') {\n//         return {\n//             ...state,\n//             counter: state.counter - 1,\n//         }\n//     }\n//     if(action.type === 'TOGGLE') {\n//         return {\n//             ...state,\n//             showCounter: !state.showCounter,\n//         }\n//     }\n//     if(action.type === 'INCREASE') {\n//         return {\n//             ...state,\n//             counter: state.counter + action.increase,\n//         }\n//     }\n//     return state;\n// }\n\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: INITIAL_COUNTER_STATE,\n    reducers: {\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, payload) {\n            console.log(payload.increase)\n            state.counter = state.counter + payload.payload.increase;\n        },\n        toggle(state) {\n            state.showCounter = !state.showCounter;\n        },\n    }\n});\n\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState: INITIAL_AUTH_STATE,\n    reducers: {\n        login(state) {\n            state.authenticated = true;\n        },\n        logout(state) {\n            state.authenticated = false;\n        },\n    },\n});\n\nconst store = configureStore({\n    reducer: {\n        counter: counterSlice.reducer,\n        auth: authSlice.reducer,\n    }\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store;"]},"metadata":{},"sourceType":"module"}