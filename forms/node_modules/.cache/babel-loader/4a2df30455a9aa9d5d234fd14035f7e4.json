{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nconst useInput = props => {\n  _s();\n\n  const [value, setValue] = useState('');\n  const [isValueTouched, setIsValueTouched] = useState(false);\n  const hasError = props.validate(value) && isValueTouched;\n\n  const changeHandler = e => {\n    setValue(e.target.value);\n  };\n\n  const blurHandler = e => {\n    setIsValueTouched(true);\n  };\n\n  const reset = () => {\n    setIsValueTouched(false);\n    setValue('');\n  };\n\n  return {\n    value,\n    isValueTouched,\n    hasError,\n    changeHandler,\n    blurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"uOJYzb0SWALH6NkrT8RMfjLITwE=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/forms/src/hooks/use-input.js"],"names":["React","useState","useInput","props","value","setValue","isValueTouched","setIsValueTouched","hasError","validate","changeHandler","e","target","blurHandler","reset"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAMO,QAAQ,GAAGL,KAAK,CAACM,QAAN,CAAeL,KAAf,KAAyBE,cAA1C;;AAEA,QAAMI,aAAa,GAAIC,CAAD,IAAO;AACzBN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASR,KAAV,CAAR;AACH,GAFD;;AAIA,QAAMS,WAAW,GAAGF,CAAC,IAAI;AACrBJ,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH,GAFD;;AAIA,QAAMO,KAAK,GAAG,MAAM;AAChBP,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAF,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAHD;;AAKA,SAAO;AACHD,IAAAA,KADG;AAEHE,IAAAA,cAFG;AAGHE,IAAAA,QAHG;AAIHE,IAAAA,aAJG;AAKHG,IAAAA,WALG;AAMHC,IAAAA;AANG,GAAP;AAQH,CA3BD;;GAAMZ,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst useInput = (props) => {\n    const [value, setValue] = useState('');\n    const [isValueTouched, setIsValueTouched] = useState(false);\n\n    const hasError = props.validate(value) && isValueTouched;\n\n    const changeHandler = (e) => {\n        setValue(e.target.value);\n    }\n\n    const blurHandler = e => {\n        setIsValueTouched(true);\n    }\n\n    const reset = () => {\n        setIsValueTouched(false);\n        setValue('');\n    }\n\n    return {\n        value,\n        isValueTouched,\n        hasError,\n        changeHandler,\n        blurHandler,\n        reset,\n    }\n};\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}