{"ast":null,"code":"var _jsxFileName = \"/Users/ashpawad/Documents/Practice/Udemy/React-Projects/01-starting-project 2/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogIn: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('IS_LOGGED_IN', 'true');\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.setItem('IS_LOGGED_IN', 'false');\n    setIsLoggedIn(false);\n  };\n\n  useEffect(() => {\n    const isLoggedIn = localStorage.getItem('IS_LOGGED_IN');\n    setIsLoggedIn(isLoggedIn === 'true');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogIn: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/01-starting-project 2/src/store/auth-context.js"],"names":["React","useEffect","useState","AuthContext","createContext","isLoggedIn","onLogout","onLogIn","AuthContextProvider","props","setIsLoggedIn","loginHandler","email","password","localStorage","setItem","logoutHandler","getItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,OAAO,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AAC3CC,EAAAA,UAAU,EAAE,KAD+B;AAE3CC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFyB;AAG3CC,EAAAA,OAAO,EAAE,MAAM,CAAE;AAH0B,CAApB,CAApB;AAMP,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC1C,QAAM,CAACJ,UAAD,EAAaK,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMS,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqC,MAArC;AACAL,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GALD;;AAOA,QAAMM,aAAa,GAAG,MAAM;AAC1BF,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqC,OAArC;AACAL,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMI,UAAU,GAAGS,YAAY,CAACG,OAAb,CAAqB,cAArB,CAAnB;AACAP,IAAAA,aAAa,CAACL,UAAU,KAAK,MAAhB,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBA,MAAAA,UAAU,EAAEA,UADa;AAEzBC,MAAAA,QAAQ,EAAEU,aAFe;AAGzBT,MAAAA,OAAO,EAAEI;AAHgB,KAA7B;AAAA,cAKKF,KAAK,CAACS;AALX;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA7BM;;GAAMV,mB;;KAAAA,mB","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport const AuthContext = React.createContext({\n    isLoggedIn: false,\n    onLogout: () => {},\n    onLogIn: () => {},\n});\n\nexport const AuthContextProvider = (props) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    const loginHandler = (email, password) => {\n      // We should of course check email and password\n      // But it's just a dummy/ demo anyways\n      localStorage.setItem('IS_LOGGED_IN', 'true');\n      setIsLoggedIn(true);\n    };\n  \n    const logoutHandler = () => {\n      localStorage.setItem('IS_LOGGED_IN', 'false');\n      setIsLoggedIn(false);\n    };\n  \n    useEffect(() => {\n      const isLoggedIn = localStorage.getItem('IS_LOGGED_IN');\n      setIsLoggedIn(isLoggedIn === 'true');\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{\n            isLoggedIn: isLoggedIn,\n            onLogout: logoutHandler,\n            onLogIn: loginHandler,\n        }} >\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}